package Auto_Selenium;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class LoginSteps {
    private WebDriver driver;

    @Given("I am on the Mailchimp login page")
    public void i_am_on_the_mailchimp_login_page() {
        System.setProperty("webdriver.chrome.driver", "C:\Users\ViktoriaOlsson\Downloads\chromedriver_win32");
        driver = new ChromeDriver();
        driver.get("https://login.mailchimp.com/signup/");
    }

    @When("I enter a valid email address and password")
    public void i_enter_a_valid_email_address_and_password() {
        WebElement email = driver.findElement(By.id("email"));
        WebElement password = driver.findElement(By.id("new_password"));
        email.sendKeys("test@example.com");
        password.sendKeys("password123");
    }

    @When("I enter a username that is more than 100 characters long and a valid password")
    public void i_enter_a_username_that_is_more_than_100_characters_long_and_a_valid_password() {
        WebElement username = driver.findElement(By.id("username"));
        WebElement password = driver.findElement(By.id("new_password"));
        username.sendKeys("thisisaverylongusernamethatisover100characterslong");
        password.sendKeys("password123");
    }

    @When("I enter an email address and password that already exists in the system")
    public void i_enter_an_email_address_and_password_that_already_exists_in_the_system() {
        WebElement email = driver.findElement(By.id("email"));
        WebElement password = driver.findElement(By.id("new_password"));
        email.sendKeys("test@example.com");
        password.sendKeys("password123");
    }

    @When("I enter an email address that does not exist in the system and a valid password")
    public void i_enter_an_email_address_that_does_not_exist_in_the_system_and_a_valid_password() {
        WebElement email = driver.findElement(By.id("email"));
        WebElement password = driver.findElement(By.id("new_password"));
        email.sendKeys("nonexistent@example.com");
        password.sendKeys("password123");
    }

    @When("I click the login button")
    public void i_click_the_login_button() {
        WebElement loginButton = driver.findElement(By.xpath("//button[@type='submit']"));
        loginButton.click();
    }

    @Then("I should be redirected to the Mailchimp dashboard")
    public void i_should_be_redirected_to_the_mailchimp_dashboard() {
        String expectedUrl = "https://us1.admin.mailchimp.com/dashboard/";
        String actualUrl = driver.getCurrentUrl();
        assert actualUrl.equals(expectedUrl);
        driver.quit();
    }

    @Then("I should see an error message that says {string}")
    public void i_should_see_an_error_message_that_says(String errorMessage) {
        WebElement errorElement = driver.findElement(By.xpath("//div[@class='error--container']//p[contains(text(),'" + errorMessage + "')]"));
        assert errorElement.isDisplayed();
        driver.quit();
    }
    
    private void waitForElement(WebElement element) {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.visibilityOf(element));
   }
   
   private void waitForClickable(WebElement element) {
      WebDriverWait wait = new WebDriverWait(driver, 30);
      wait.until(ExpectedConditions.elementToBeClickable(element));
   }
}
